// Code generated by "gormrepogen -t=Test ./repo"; DO NOT EDIT

package repo

import (
	"github.com/l-vitaly/gormrepo"
)

type testBaseRepo struct {
	gormrepo.Repo
}

func (r *testBaseRepo) Related(claim *Test, related interface{}, criteria ...gormrepo.CriteriaOption) (*Test, error) {
	err := r.ApplyCriteria(criteria).Model(claim).Related(&related).Error
	return claim, err
}

func (r *testBaseRepo) Get(id uint) (*Test, error) {
	var entity Test
	err := r.DB.Where(map[string]interface{}{"id": id}).Find(&entity).Error
	return &entity, err
}
func (r *testBaseRepo) GetAll() ([]*Test, error) {
	return r.GetBy()
}

func (r *testBaseRepo) GetBy(criteria ...gormrepo.CriteriaOption) ([]*Test, error) {
	var entities []*Test
	err := r.ApplyCriteria(criteria).Find(&entities).Error
	return entities, err
}

func (r *testBaseRepo) GetByFirst(criteria ...gormrepo.CriteriaOption) (*Test, error) {
	var entity Test
	err := r.ApplyCriteria(criteria).First(&entity).Error
	return &entity, err
}

func (r *testBaseRepo) GetByLast(criteria ...gormrepo.CriteriaOption) (*Test, error) {
	var entity Test
	err := r.ApplyCriteria(criteria).Last(&entity).Error
	return &entity, err
}

func (r *testBaseRepo) Create(entity Test) (*Test, error) {
	if !r.DB.NewRecord(entity) {
		return nil, gormrepo.ErrPrimaryNotBlank
	}
	err := r.DB.Create(&entity).Error
	if err != nil {
		return nil, err
	}
	return &entity, nil
}

func (r *testBaseRepo) Update(entity *Test, fields gormrepo.Fields, criteria ...gormrepo.CriteriaOption) (*Test, error) {
	err := r.ApplyCriteria(criteria).Model(&entity).Updates(fields).Error
	if err != nil {
		return nil, err
	}
	return entity, nil
}

func (r *testBaseRepo) AutoMigrate() error {
	return r.DB.AutoMigrate(&Test{}).Error
}
